{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "AddedOwner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "threshold",
						"type": "uint256"
					}
				],
				"name": "ChangedThreshold",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "RemovedOwner",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "addOwnerWithThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "changeThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwners",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "prevOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "removeOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "prevOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "swapOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Stefan George - <stefan@gnosis.pm>Richard Meissner - <richard@gnosis.pm>",
			"kind": "dev",
			"methods": {
				"addOwnerWithThreshold(address,uint256)": {
					"details": "Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.",
					"params": {
						"_threshold": "New threshold.",
						"owner": "New owner address."
					}
				},
				"changeThreshold(uint256)": {
					"details": "Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.",
					"params": {
						"_threshold": "New threshold."
					}
				},
				"getOwners()": {
					"details": "Returns array of owners.",
					"returns": {
						"_0": "Array of Safe owners."
					}
				},
				"removeOwner(address,address,uint256)": {
					"details": "Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.",
					"params": {
						"_threshold": "New threshold.",
						"owner": "Owner address to be removed.",
						"prevOwner": "Owner that pointed to the owner to be removed in the linked list"
					}
				},
				"swapOwner(address,address,address)": {
					"details": "Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.",
					"params": {
						"newOwner": "New owner address.",
						"oldOwner": "Owner address to be replaced.",
						"prevOwner": "Owner that pointed to the owner to be replaced in the linked list"
					}
				}
			},
			"title": "OwnerManager - Manages a set of owners and a threshold to perform actions.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addOwnerWithThreshold(address,uint256)": {
					"notice": "Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."
				},
				"changeThreshold(uint256)": {
					"notice": "Changes the threshold of the Safe to `_threshold`."
				},
				"removeOwner(address,address,uint256)": {
					"notice": "Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."
				},
				"swapOwner(address,address,address)": {
					"notice": "Replaces the owner `oldOwner` in the Safe with `newOwner`."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@gnosis.pm/safe-contracts@1.3.0/contracts/base/OwnerManager.sol": "OwnerManager"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@gnosis.pm/safe-contracts@1.3.0/contracts/base/OwnerManager.sol": {
			"keccak256": "0x489bc06b7f62222c8eb632bf078874d14c63dec25f3820f060207087b892f2b0",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://b39d9db26557f4a50c1a59252cc518c52b54bdde06e93c8e1e60ffe42a46ded7",
				"dweb:/ipfs/QmXunS1bkU2PfbcY1ty61nVVLgRYnsAJFvTrcMseRvju7P"
			]
		},
		".deps/npm/@gnosis.pm/safe-contracts@1.3.0/contracts/common/SelfAuthorized.sol": {
			"keccak256": "0x59d36efca578b75541a776f62a0d0ef03712fc27b6647c3915c14b572106d7bc",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://8530c6e0392415d42486847cd4368d30f6cac42051596330692a571fcdbb9e29",
				"dweb:/ipfs/QmWw51Pshw5t2sMKANzxtfNdBSQUyQQpfTr3Mi7oNJGk7U"
			]
		}
	},
	"version": 1
}